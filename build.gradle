plugins {
   id 'java'
   id "org.xbib.gradle.plugin.jflex" version "1.5.0"
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "com.github.spotbugs" version "4.7.10"
   id "org.ajoberstar.grgit" version "4.1.1"
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
    
}
sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
     java {
       srcDir "$buildDir/my-generated-sources/jflex"
     }
  }
}
spotbugsMain{
	ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    reports {
       xml.enabled = false
       html.enabled = true
    }
}
spotbugsTest.enabled = false
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0' 
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test {  
    ignoreFailures = true 
    
    useJUnitPlatform()
}

task copyReports (dependsOn:['test','spotbugsMain','clonePages']) 
{        
    doLast{
    ant.copy(todir: 'build/gh-pages/reports/')
    {
    fileset(dir:'build/reports/')
    }
    
    }
}

task copyDocs (dependsOn:['javadoc','copyReports']) {            
    doLast{
    ant.copy(todir: 'build/gh-pages/docs/')
    {
    fileset(dir: 'build/docs/')
    }
    
    }
}

task reports (dependsOn: ['copyDocs']) 
{ 

  
}

task updateGHPages (dependsOn: 'reports') {                     
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.add (update: false, patterns: ['docs/'])
        grgit.add (update: true, patterns: ['docs/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.close()
    }

}
task clonePages()
{ 
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        println('Comment'+thisRepo)
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone
        {
            dir = pagesDir
            uri = /*'file:' +*/ thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
         grgit.close()
}
}